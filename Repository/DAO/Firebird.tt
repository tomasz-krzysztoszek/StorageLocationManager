<#@ template language="C#" debug="True" hostSpecific="True" #>
<#@ output extension=".generated.cs"                        #>

<#@ include file="$(LinqToDBT4FirebirdTemplatesPath)LinqToDB.Firebird.Tools.ttinclude" once="true" #>
<#@ include file="$(LinqToDBT4FirebirdTemplatesPath)PluralizationService.ttinclude"    once="true" #>
<#
	/*
		1. Create new *.tt file (e.g. MyDatabase.tt) in a folder where you would like to generate your data model
		   and copy content from this file to it. For example:

			MyProject
				DataModels
					MyDatabase.tt

		2. Modify the connection settings below to connect to your database.

		3. Add connection string to the web/app.config file:

			<connectionStrings>
				<add name="MyDatabase" connectionString="DataSource=MyServer;Database=C:\Data\MyDatabase.fdb;User Id=SYSDBA;Password=masterkey" providerName="Firebird" />
			</connectionStrings>

		4. To access your database use the following code:

			using (var db = new MyDatabaseDB())
			{
				var q =
					from c in db.Customers
					select c;

				foreach (var c in q)
					Console.WriteLine(c.ContactName);
			}

		5. See more at https://linq2db.github.io/articles/T4.html

		IMPORTANT: if running .tt file gives you error like this:
		"error : Failed to resolve include text for file: C:\...\$(LinqToDBT4<DB>TemplatesPath)LinqToDB.<DB>.Tools.ttinclude"
		check tt file properties.
		Custom tool must be set to TextTemplatingFileGenerator, not TextTemplatingFilePreprocessor or any other value.
	*/

	// to configure GetSchemaOptions properties, add them here, before load metadata call

	LoadFirebirdMetadata("FBDB", @"localhost:C:\DB\FBDB.FB");
//	LoadFirebirdMetadata(string server, string database, string uid, string password);
//	LoadFirebirdMetadata(string connectionString);

	NamespaceName = "DAO.DataModels";
	PrefixTableMappingWithSchema = false;

	var allowedTables = new HashSet<string>() {
		"DOSTAWA",
		"ARIT_SLM_BLOKADA",
		"ARIT_SLM_UZYTKOWNIK",
		"ARIT_SLM_SPRZ_USER_MAG",
		"ARIT_SLM_MAGAZYN_VIEW",
		"ARIT_SLM_MIEJSCA_SKL_VIEW",
		"ARIT_SLM_RACK_VIEW",
		"ARIT_SLM_DOSTAWA_VIEW"
	};

	var allowedProcedures = new HashSet<string>() {
		"ARIT_SLM_EDIT_DOSTAWA"
	};

	// go though Tables and remove all tables you don't need
	foreach (var kvp in Tables.ToList())
		if (!allowedTables.Contains(kvp.Value.TableName))
			Tables.Remove(kvp.Key); // remove table
		else
			// if table needed, check that it doesn't have associations to removed tables
			foreach (var keyKvp in kvp.Value.ForeignKeys.ToList())
				if (!allowedTables.Contains(keyKvp.Value.OtherTable.TableName))
					kvp.Value.ForeignKeys.Remove(keyKvp.Key); // remove association to table

	// also remove all procedures that return filtered-out tables
	foreach (var kvp in Procedures.ToList())
		if (!allowedProcedures.Contains(kvp.Key))
			Procedures.Remove(kvp.Key); // remove procedure

	GenerateModel();
#>
